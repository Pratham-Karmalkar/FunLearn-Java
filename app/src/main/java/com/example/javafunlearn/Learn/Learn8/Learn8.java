package com.example.javafunlearn.Learn.Learn8;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Build;
import android.os.Bundle;
import android.text.Html;
import android.text.method.ScrollingMovementMethod;
import android.widget.TextView;

import com.example.javafunlearn.R;

public class Learn8 extends AppCompatActivity {

    @RequiresApi(api = Build.VERSION_CODES.N)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_learn8);

        TextView learn = findViewById(R.id.learn);

        learn.setMovementMethod(new ScrollingMovementMethod());

        learn.setText(Html.fromHtml(" <b>Packages: java.util: </b> "
                +
                "<p> It contains the collections framework, legacy collection classes, event model, date and time facilities, internationalization, and miscellaneous utility classes (a string tokenizer, a random-number generator, and a bit array). </p> <br>"
                +
                "<p><b>Following are the Important Classes in Java.util package : </b></p> <br> "
                +
                "<ol><li>AbstractCollection:&nbsp;This class provides a skeletal implementation of the Collection interface, to minimize the effort required to implement this interface.</li><li>AbstractList:&nbsp;This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a “random access” data store (such as an array).</li><li>AbstractMap&lt;K,V&gt;:&nbsp;This class provides a skeletal implementation of the Map interface, to minimize the effort required to implement this interface.</li><li>AbstractMap.SimpleEntry&lt;K,V&gt;:&nbsp;An Entry maintaining a key and a value.</li><li>AbstractMap.SimpleImmutableEntry&lt;K,V&gt;: An Entry maintaining an immutable key and value.</li><li>AbstractQueue: This class provides skeletal implementations of some Queue operations.</li><li>AbstractSequentialList: This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a “sequential access” data store (such as a linked list).</li><li>AbstractSet:&nbsp;This class provides a skeletal implementation of the Set interface to minimize the effort required to implement this interface.</li><li>ArrayDeque:&nbsp;Resizable-array implementation of the Deque interface.</li><li>ArrayList:&nbsp;Resizable-array implementation of the List interface.</li><li>Arrays:&nbsp;This class contains various methods for manipulating arrays (such as sorting and searching).</li><li>BitSet: This class implements a vector of bits that grows as needed.</li><li>Calendar: The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the date of the next week.</li><li>Collections:&nbsp;This class consists exclusively of static methods that operate on or return collections.</li><li>Currency:&nbsp;Represents a currency.</li><li>Date:&nbsp;The class Date represents a specific instant in time, with millisecond precision.</li><li>Dictionary&lt;K,V&gt;:&nbsp;The Dictionary class is the abstract parent of any class, such as Hashtable, which maps keys to values.</li><li>EnumMap,V&gt;: A specialized Map implementation for use with enum type keys.</li><li>EnumSet:&nbsp;A specialized Set implementation for use with enum types.</li><li>EventListenerProxy:&nbsp;An abstract wrapper class for an EventListener class which associates a set of additional parameters with the listener.</li><li>EventObject:&nbsp;The root class from which all event state objects shall be derived.</li><li>FormattableFlags:&nbsp;FomattableFlags are passed to the Formattable.formatTo() method and modify the output format for Formattables.</li><li>Formatter:&nbsp;An interpreter for printf-style format strings.</li><li>GregorianCalendar:&nbsp;GregorianCalendar is a concrete subclass of Calendar and provides the standard calendar system used by most of the world.</li><li>HashMap&lt;K,V&gt;:&nbsp;Hash table based implementation of the Map interface.</li><li>HashSet:&nbsp;This class implements the Set interface, backed by a hash table (actually a HashMap instance).</li><li>Hashtable&lt;K,V&gt;:&nbsp;This class implements a hash table, which maps keys to values.</li><li>IdentityHashMap&lt;K,V&gt;:&nbsp;This class implements the Map interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values).</li><li>LinkedHashMap&lt;K,V&gt;: Hash table and linked list implementation of the Map interface, with predictable iteration order.</li><li>LinkedHashSet:&nbsp;Hash table and linked list implementation of the Set interface, with predictable iteration order.</li><li>LinkedList:&nbsp;Doubly-linked list implementation of the List and Deque interfaces.</li><li>ListResourceBundle:&nbsp;ListResourceBundle is an abstract subclass of ResourceBundle that manages resources for a locale in a convenient and easy to use list.</li><li>Locale –Set 1, Set :&nbsp;A Locale object represents a specific geographical, political, or cultural region.</li><li>Locale.Builder:&nbsp;Builder is used to build instances of Locale from values configured by the setters.</li><li>Objects:&nbsp;This class consists of static utility methods for operating on objects.</li><li>Observable:&nbsp;This class represents an observable object, or “data” in the model-view paradigm.</li><li>PriorityQueue :&nbsp;An unbounded priority queue based on a priority heap.</li><li>Properties:&nbsp;The Properties class represents a persistent set of properties.</li><li>PropertyPermission:&nbsp;This class is for property permissions.</li><li>PropertyResourceBundle:&nbsp;PropertyResourceBundle is a concrete subclass of ResourceBundle that manages resources for a locale using a set of static strings from a property file.</li><li>Random :&nbsp;An instance of this class is used to generate a stream of pseudorandom numbers.</li><li>ResourceBundle:&nbsp;Resource bundles contain locale-specific objects.</li><li>ResourceBundle.Control:&nbsp;ResourceBundle.Control defines a set of callback methods that are invoked by the ResourceBundle.getBundle factory methods during the bundle loading process.</li><li>Scanner:&nbsp;A simple text scanner which can parse primitive types and strings using regular expressions.</li><li>ServiceLoader: A simple service-provider loading facility.</li><li>SimpleTimeZone:&nbsp;SimpleTimeZone is a concrete subclass of TimeZone that represents a time zone for use with a Gregorian calendar.</li><li>Stack :&nbsp;The Stack class represents a last-in-first-out (LIFO) stack of objects.</li><li>StringTokenizer :&nbsp;The string tokenizer class allows an application to break a string into tokens.</li><li>Timer :&nbsp;A facility for threads to schedule tasks for future execution in a background thread.</li><li>TimerTask :&nbsp;A task that can be scheduled for one-time or repeated execution by a Timer.</li><li>TimeZone:&nbsp;TimeZone represents a time zone offset, and also figures out daylight savings.</li><li>TreeMap&lt;K,V&gt;:&nbsp;A Red-Black tree based NavigableMap implementation.</li><li>TreeSet:&nbsp;A NavigableSet implementation based on a TreeMap.</li><li>UUID:&nbsp;A class that represents an immutable universally unique identifier (UUID).</li><li>Vector:&nbsp;The Vector class implements a growable array of objects.</li><li>WeakHashMap&lt;K,V&gt;:&nbsp;Hash table based implementation of the Map interface, with weak keys.</li></ol>"

                , Html.FROM_HTML_MODE_COMPACT));

    }
}